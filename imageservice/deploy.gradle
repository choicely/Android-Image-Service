apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
ext {
    // This configuration will result in:
    // compile '<groupId>:<artifactId>:<libVersion>'
    groupId = 'com.choicely' // package name of the project
    artifactId = "imageservice" // module name of the library
    libVersion = "0.1.1"
}
version = libVersion
group = groupId

bintray {
    def Properties localProps = new Properties()
    localProps.load(new FileInputStream(file("../local.properties")))
    user = localProps["BINTRAY_USER"]
    key = localProps["BINTRAY_KEY"]
    configurations = ['archives']
    publish = true //[Default: false] Whether version should be auto published after an upload
    override = false //[Default: false] Whether to override version artifacts already published
    pkg {
        repo = 'com.choicely'
        name = artifactId
        userOrg = 'choicely'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/choicely/Android-Image-Service.git'
        version {
            name = libVersion
            desc = 'Choicely Image Service'
            released = new Date()
            vcsTag = libVersion
//            attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']
        }
    }
}

install {
    repositories.mavenInstaller {
        pom.project {
            packaging 'aar'
            groupId groupId
            artifactId artifactId
            version libVersion
            description 'Android image loading library'
            name artifactId // pom.project.name must be same as bintray.pkg.name
            url 'https://github.com/choicely/Android-Image-Service'
            licenses {
                license { // HARDCODED
                    name 'Apache-2.0'
                    url 'https://opensource.org/licenses/Apache-2.0'
                    distribution 'repo'
                }
            }
            scm {
                connection 'https://github.com/choicely/Android-Image-Service.git'
                developerConnection 'https://github.com/choicely/Android-Image-Service'
                url 'https://github.com/choicely/Android-Image-Service'
            }
            developers {
                developer {
                    id "Tommy"
                    name "Tommy Eklund"
                    email "tommy@choicely.com"
                }
            }
        }
        pom.withXml {
            def dependenciesNode = asNode().appendNode('dependencies')
            // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
            configurations.implementation.allDependencies.each {
                // Ensure dependencies such as fileTree are not included.
                if (it.name != 'unspecified') {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }
}
//just copy paste the lines below
if (project.hasProperty("kotlin")) { //Kotlin libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc, dependsOn: dokka) {

    }
} else if (project.hasProperty("android")) {
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        classpath += configurations.javadocDeps
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    // options.encoding = 'UTF-8'
}

artifacts {
    archives javadocJar
    archives sourcesJar
}